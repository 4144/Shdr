// Generated by CoffeeScript 1.4.0
(function() {
  var App;

  App = (function() {

    App.UPDATE_ALL = 0;

    App.UPDATE_ENTER = 1;

    App.UPDATE_MANUAL = 2;

    App.FRAGMENT = 0;

    App.VERTEX = 1;

    function App(domEditor, domCanvas, conf) {
      var _this = this;
      if (conf == null) {
        conf = {};
      }
      window.THREE_SHADER_OVERRIDE = true;
      this.documents = ['', ''];
      this.marker = null;
      this.conf = {
        update: App.UPDATE_ALL,
        mode: App.FRAGMENT
      };
      this.extend(this.conf, conf);
      this.ui = new shdr.UI(this);
      this.viewer = new shdr.Viewer(this.byId(domCanvas));
      this.validator = new shdr.Validator(this.viewer.canvas);
      this.initEditor(domEditor);
      this.byId(domEditor).addEventListener('keyup', (function(e) {
        return _this.onEditorKeyUp(e);
      }), false);
      this.byId(domEditor).addEventListener('keydown', (function(e) {
        return _this.onEditorKeyDown(e);
      }), false);
      this.loop();
    }

    App.prototype.initEditor = function(domEditor) {
      this.documents[App.FRAGMENT] = this.viewer.fs;
      this.documents[App.VERTEX] = this.viewer.vs;
      this.editor = ace.edit(domEditor);
      this.editor.setFontSize("16px");
      this.editor.setTheme("ace/theme/monokai");
      this.editor.getSession().setTabSize(2);
      this.editor.getSession().setMode("ace/mode/glsl");
      this.editor.getSession().setUseWrapMode(true);
      this.editor.getSession().setValue(this.documents[this.conf.mode]);
      return this.editor.focus();
    };

    App.prototype.loop = function() {
      var _this = this;
      requestAnimationFrame(function() {
        return _this.loop();
      });
      return this.update();
    };

    App.prototype.update = function() {
      return this.viewer.update();
    };

    App.prototype.updateShader = function() {
      var line, msg, ok, session, src, type, _ref;
      session = this.editor.getSession();
      if (this.marker != null) {
        session.removeMarker(this.marker.id);
      }
      if (this.conf.mode === App.FRAGMENT) {
        type = shdr.Validator.FRAGMENT;
      } else {
        type = shdr.Validator.VERTEX;
      }
      src = session.getValue();
      _ref = this.validator.validate(src, type), ok = _ref[0], line = _ref[1], msg = _ref[2];
      if (ok) {
        this.viewer.updateShader(src, this.conf.mode);
        return this.ui.setStatus('Shader successfully compiled', shdr.UI.SUCCESS);
      } else {
        line = Math.max(0, line - 1);
        this.marker = session.highlightLines(line, line);
        return this.ui.setStatus("Line " + line + " : " + msg, shdr.UI.ERROR);
      }
    };

    App.prototype.onEditorKeyUp = function(e) {
      var key, proc;
      key = e.keyCode;
      proc = this.conf.update === App.UPDATE_ENTER && key === 13;
      proc || (proc = this.conf.update === App.UPDATE_ALL);
      if (proc) {
        this.updateShader();
      }
      return true;
    };

    App.prototype.onEditorKeyDown = function(e) {
      if (this.conf.update !== App.UPDATE_MANUAL) {
        return true;
      }
      if (e.ctrlKey && e.keyCode === 83) {
        this.updateShader();
        e.cancelBubble = true;
        e.returnValue = false;
        if (typeof e.stopPropagation === "function") {
          e.stopPropagation();
        }
        if (typeof e.preventDefault === "function") {
          e.preventDefault();
        }
        return false;
      } else {
        return true;
      }
    };

    App.prototype.setUpdateMode = function(mode) {
      this.conf.update = parseInt(mode);
      return this;
    };

    App.prototype.setMode = function(mode) {
      var old, session;
      if (mode == null) {
        mode = App.FRAGMENT;
      }
      if (this.conf.mode === mode) {
        return false;
      }
      old = this.conf.mode;
      this.conf.mode = mode;
      session = this.editor.getSession();
      switch (mode) {
        case App.FRAGMENT:
          this.documents[old] = session.getValue();
          session.setValue(this.documents[App.FRAGMENT]);
          break;
        case App.VERTEX:
          this.documents[old] = session.getValue();
          session.setValue(this.documents[App.VERTEX]);
      }
      return this;
    };

    App.prototype.byId = function(id) {
      return document.getElementById(id);
    };

    App.prototype.extend = function(object, properties) {
      var key, val;
      for (key in properties) {
        val = properties[key];
        object[key] = val;
      }
      return object;
    };

    return App;

  })();

  this.shdr || (this.shdr = {});

  this.shdr.App = App;

}).call(this);
