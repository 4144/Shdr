// Generated by CoffeeScript 1.4.0
(function() {
  var UI;

  UI = (function() {

    UI.ERROR = 0;

    UI.SUCCESS = 1;

    UI.WARNING = 2;

    function UI(app) {
      this.app = app;
      this.initStatus();
      this.initSnippets();
      this.initModels();
      this.initMenus();
      this.initToggles();
    }

    UI.prototype.initStatus = function() {
      var content, el, icon, span;
      el = $('#status');
      span = el.children('span');
      icon = span.children('i');
      content = span.children('b');
      return this.status = {
        container: el,
        span: span,
        icon: icon,
        content: content
      };
    };

    UI.prototype.initToggles = function() {
      var _this = this;
      return $('.menu-toggle').on('click', function(e) {
        return _this.onToggle(e);
      });
    };

    UI.prototype.initMenus = function() {
      var _this = this;
      $('.menu-trigger').on('click.on', function(e) {
        return _this.onMenuTrigger(e);
      });
      return $('.menu-item').on('click', function(e) {
        return _this.onMenuItem(e);
      });
    };

    UI.prototype.initSnippets = function() {
      var button, key, list;
      list = $('#menu-snippets .menu-list');
      button = $('<button>').addClass('menu-item');
      for (key in shdr.Snippets) {
        list.append(button.clone().text(key));
      }
      return false;
    };

    UI.prototype.initModels = function() {
      var button, key, list, model, _ref;
      list = $('#menu-models .menu-list');
      button = $('<button>').addClass('menu-item');
      _ref = shdr.Models;
      for (key in _ref) {
        model = _ref[key];
        list.append(button.clone().text(model.name).attr('data-index', key));
      }
      return false;
    };

    UI.prototype.setStatus = function(message, type) {
      if (type == null) {
        type = UI.ERROR;
      }
      this.status.span.removeClass();
      this.status.icon.removeClass();
      switch (type) {
        case UI.ERROR:
          this.status.span.addClass('status-error');
          this.status.icon.addClass('icon-exclamation-sign');
          break;
        case UI.SUCCESS:
          this.status.span.addClass('status-success');
          this.status.icon.addClass('icon-ok-sign');
          break;
        case UI.WARNING:
          this.status.span.addClass('status-warning');
          this.status.icon.addClass('icon-warning-sign');
      }
      return this.status.content.text(message);
    };

    UI.prototype.onToggle = function(event) {
      var el, ico, root, state, _name;
      el = $(event.target);
      root = el.parent();
      ico = el.children('i');
      state = el.attr('data-current') === el.attr('data-off');
      if (state === true) {
        el.attr('data-current', el.attr('data-on'));
        ico.removeClass(ico.attr('data-off'));
        ico.addClass(ico.attr('data-on'));
      } else {
        el.attr('data-current', el.attr('data-off'));
        ico.removeClass(ico.attr('data-on'));
        ico.addClass(ico.attr('data-off'));
      }
      if (typeof this[_name = root.attr('data-action') + 'Action'] === "function") {
        this[_name](state, null, el);
      }
      return this.app.editor.focus();
    };

    UI.prototype.onMenuTrigger = function(event) {
      var el, list, root,
        _this = this;
      el = $(event.target);
      root = el.parent();
      list = root.children('.menu-list');
      el.addClass('open');
      list.slideDown(200);
      $(document).on('click.menu-trigger', function() {
        return _this.offMenuTrigger(el, list);
      });
      el.off('click.on');
      el.on('click.off', function(e) {
        return _this.offMenuTrigger(el, list);
      });
      return event.stopPropagation();
    };

    UI.prototype.offMenuTrigger = function(el, list) {
      var _this = this;
      el.removeClass('open');
      el.off('click.off');
      el.blur();
      el.on('click.on', function(e) {
        return _this.onMenuTrigger(e);
      });
      list.slideUp(200);
      $(document).off('click.menu-trigger');
      return this.app.editor.focus();
    };

    UI.prototype.onMenuItem = function(event) {
      var el, index, item, list, root, _name;
      item = $(event.target);
      list = item.parent();
      root = list.parent();
      el = root.children('.menu-trigger');
      index = item.attr('data-index');
      if (typeof this[_name = root.attr('data-action') + 'Action'] === "function") {
        this[_name](index, item, el);
      }
      this.offMenuTrigger(el, list);
      return event.stopPropagation();
    };

    UI.prototype.updateAction = function(index, item, trigger) {
      trigger.html(item.html());
      return this.app.setUpdateMode(index);
    };

    UI.prototype.snippetsAction = function(index, item, trigger) {
      var code;
      code = shdr.Snippets[item.text()];
      if (code != null) {
        return this.app.editor.insert(code);
      }
    };

    UI.prototype.modelsAction = function(index, item, trigger) {
      trigger.children('span').text(item.text());
      return this.app.viewer.loadModel(index);
    };

    UI.prototype.rotateAction = function(state) {
      return this.app.viewer.rotate = state;
    };

    return UI;

  })();

  this.shdr || (this.shdr = {});

  this.shdr.UI = UI;

}).call(this);
