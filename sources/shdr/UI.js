// Generated by CoffeeScript 1.4.0
(function() {
  var UI;

  UI = (function() {

    function UI(app) {
      this.app = app;
      this.initSnippets();
      this.initMenus();
    }

    UI.prototype.initMenus = function() {
      var _this = this;
      $('.menu-trigger').on('click.on', function(e) {
        return _this.onMenuTrigger(e);
      });
      return $('.menu-item').on('click', function(e) {
        return _this.onMenuItem(e);
      });
    };

    UI.prototype.initSnippets = function() {
      var button, key, list, _results;
      list = $('#menu-snippets .menu-list');
      button = $('<button>').addClass('menu-item');
      _results = [];
      for (key in shdr.Snippets) {
        _results.push(list.append(button.clone().text(key)));
      }
      return _results;
    };

    UI.prototype.onMenuTrigger = function(event) {
      var el, list, root,
        _this = this;
      el = $(event.target);
      root = el.parent();
      list = root.children('.menu-list');
      el.addClass('open');
      list.slideDown(200);
      $(document).on('click.menu-trigger', function() {
        return _this.offMenuTrigger(el, list);
      });
      el.off('click.on');
      el.on('click.off', function(e) {
        return _this.offMenuTrigger(el, list);
      });
      return event.stopPropagation();
    };

    UI.prototype.offMenuTrigger = function(el, list) {
      var _this = this;
      el.removeClass('open');
      el.off('click.off');
      el.blur();
      el.on('click.on', function(e) {
        return _this.onMenuTrigger(e);
      });
      list.slideUp(200);
      return $(document).off('click.menu-trigger');
    };

    UI.prototype.onMenuItem = function(event) {
      var el, index, item, list, root, _name;
      item = $(event.target);
      list = item.parent();
      root = list.parent();
      el = root.children('.menu-trigger');
      index = item.attr('data-index');
      if (typeof this[_name = root.attr('data-action') + 'Action'] === "function") {
        this[_name](index, item, el);
      }
      this.offMenuTrigger(el, list);
      return event.stopPropagation();
    };

    UI.prototype.updateAction = function(index, item, trigger) {
      trigger.html(item.html());
      return this.app.setUpdateMode(index);
    };

    UI.prototype.snippetsAction = function(index, item, trigger) {
      var code;
      code = shdr.Snippets[item.text()];
      if (code != null) {
        return this.app.editor.insert(code);
      }
    };

    return UI;

  })();

  this.shdr || (this.shdr = {});

  this.shdr.UI = UI;

}).call(this);
